syntax = "proto3";

package  user.auth;

message UserResult {
  string _id = 1;
  string fullName = 2;
  string email = 3;
  bool emailVerify = 4;
  string photo = 5;
  bool isActive = 6;
  bool verified = 7;
  string status = 8;
  bool oauthRegistered = 9;
  string oauthProvider = 10;
    //ERROR
    int32 errorCode = 11 ;
    string timestamp = 12 ;
    string path = 13 ;
    string message = 14 ;
}
message MakeOauthRequest {
  string email = 1;
  string oauthProvider = 2;
}

message GetRefreshTokenRequest {
  string refreshToken = 1;
}

message ValidateAccessTokenRequest {
  string accessToken = 1;
}


message LoginResult {
  string accessToken = 1 ;
  string refreshToken = 2 ;
  string status = 3 ;
  //ERROR
  int32 errorCode = 4 ;
  string timestamp = 5 ;
  string path = 6 ;
  string message = 7 ;
}

message LoginResponse{
  bool success = 1;
  string message = 2;
  LoginResult data = 3;
  int32 status = 4;
}

message ValidateAccessTokenResponse{
  bool success = 1;
  string message = 2;
  UserResult data = 3;
  int32 status = 4;

}

message CheckEmailBeforRegisterRequest{
  string email = 1;
}
message CheckEmailBeforRegisterResponse{
  string email = 1;
  bool registered = 2;

}

message RegisterWithEmailRequest{
  string email = 1;
  string password = 2;
  int32 code = 3;
}

message ILoginWithEmailRequest{
  string email = 1;
  string password = 2;
}

service AuthService {
  rpc LoginWithOauth (MakeOauthRequest) returns (LoginResponse);
  rpc ValidateAccessToken (ValidateAccessTokenRequest) returns (ValidateAccessTokenResponse);
  rpc GetRefreshToken (GetRefreshTokenRequest) returns (LoginResponse);
  rpc checkEmailBeforRegister (CheckEmailBeforRegisterRequest) returns (CheckEmailBeforRegisterResponse);
  rpc registerWithEmail (RegisterWithEmailRequest) returns (LoginResponse);
  rpc loginWithEmail (ILoginWithEmailRequest) returns (LoginResponse);


}